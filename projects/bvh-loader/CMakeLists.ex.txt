cmake_minimum_required(VERSION 2.8)

project(bvh-loader)

set(GIT_ROOT ${CMAKE_SOURCE_DIR}/../..)
set(SRC_PATH ${GIT_ROOT}/src)

set(CMAKE_BINARY_DIR ${GIT_ROOT}/bin)
set(EXECUTABLE_OUTPUT_PATH ${GIT_ROOT}/bin)
set(LIBRARY_OUTPUT_PATH ${GIT_ROOT}/bin)

include_directories("${PROJECT_SOURCE_DIR}")
include_directories("${SRC_PATH}")

set(CMAKE_CXX_STANDARD 11)

option(USE_GLFW "Use GLFW" ON)
option(USE_GLEW "Use GLEW" ON)

if (USE_GLFW)
  find_package(OpenGL REQUIRED)
  set(EXT_LIBS ${EXT_LIBS} ${GLFW_LIBS})
endif (USE_GLFW)

if (USE_GLFW)
#  include_directories("${GIT_ROOT}/lib_bin/glfw/include")
#  set(glfw3_DIR "${GIT_ROOT}/lib_bin/glfw/lib/cmake/glfw3")
#  find_package(glfw3 REQUIRED)
#  set(EXT_LIBS ${EXT_LIBS} glfw)
  set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
  set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
  set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
#  add_subdirectory(${GIT_ROOT}/lib/glfw)
  add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../../lib/glfw ${CMAKE_CURRENT_BINARY_DIR}/glfw)
  set(EXT_LIBS ${EXT_LIBS} glfw)
endif (USE_GLFW)

if (APPLE AND (NOT USE_GLEW))
  set(EXT_LIBS ${EXT_LIBS} "-framework Cocoa -framework OpenGL -framework IOKit -framework CoreVideo")
endif ()

if (USE_GLEW)
  if (APPLE)
#    include_directories("${GIT_ROOT}/lib_bin/glew-2.1.0/macos/include")
    set(GLEW_USE_STATIC_LIBS ON)
#    set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${GIT_ROOT}/lib_bin/glew-2.1.0/macos/lib/cmake/glew")
    set(GLEW_INCLUDE_DIR "${GIT_ROOT}/lib_bin/glew-2.1.0/macos/include")
    set(GLEW_LIBRARY "${GIT_ROOT}/lib_bin/glew-2.1.0/macos/lib")
    find_package(glew REQUIRED)
    if (GLEW_FOUND)
        include_directories(${GLEW_INCLUDE_DIRS})
        message(${GLEW_INCLUDE_DIRS})
        message(${GLEW_LIBRARIES})
        message(${GLEW_LIBRARY})
    endif()
    set(EXT_LIBS ${EXT_LIBS} GLEW)
  endif(APPLE)
endif (USE_GLEW)

add_executable(bvh-loader ${PROJECT_SOURCE_DIR}/main.cpp)
target_link_libraries(bvh-loader ${EXT_LIBS})
set_target_properties(bvh-loader PROPERTIES LINK_FLAGS "-Wl,-F/Library/Frameworks")
